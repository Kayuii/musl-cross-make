From 0b5368a66ecc1eabb500fdea9ed3ef5019060fd9 Mon Sep 17 00:00:00 2001
From: Patrick Oppenlander <patrick.oppenlander@gmail.com>
Date: Thu, 21 Jan 2021 17:06:47 +1100
Subject: [PATCH] [ELF] Write output sections in PT_LOAD segment order

Previously if sections in a link script were not in program segment
order lld often failed with file range overlap errors.

The new out-of-order-sections test case previously failed with:

ld.lld: error: section .foo file range overlaps with .bar
>>> .foo range is [0x2000, 0x2000]
>>> .bar range is [0x2000, 0x2000]

Differential Revision: https://reviews.llvm.org/D95199
---
 lld/ELF/Writer.cpp                            | 30 +++++++++---
 lld/test/ELF/linkerscript/at8.test            |  2 +-
 .../empty-sections-expressions.test           |  2 +-
 .../linkerscript/implicit-program-header.test |  2 +-
 lld/test/ELF/linkerscript/nobits-offset.s     |  4 +-
 .../ELF/linkerscript/out-of-order-sections.s  | 49 +++++++++++++++++++
 lld/test/ELF/linkerscript/tbss.s              | 20 +++++++-
 lld/test/ELF/partition-notes.s                |  2 +-
 lld/test/ELF/partition-synthetic-sections.s   |  4 +-
 lld/test/ELF/tls-offset.s                     |  4 +-
 10 files changed, 100 insertions(+), 19 deletions(-)
 create mode 100644 lld/test/ELF/linkerscript/out-of-order-sections.s

diff --git a/lld/ELF/Writer.cpp b/lld/ELF/Writer.cpp
index b9fd03bc2eda..7c50adc39b09 100644
--- a/lld/ELF/Writer.cpp
+++ b/lld/ELF/Writer.cpp
@@ -2570,15 +2570,31 @@ template <class ELFT> void Writer<ELFT>::assignFileOffsets() {
       if (p->p_type == PT_LOAD && (p->p_flags & PF_X))
         lastRX = p;
 
+  // process output sections in order of load segment
+  for (Partition &part : partitions) {
+    for (PhdrEntry *p : part.phdrs) {
+      if (p->p_type != PT_LOAD)
+        continue;
+      for (OutputSection *sec : outputSections) {
+        if (sec->ptLoad != p)
+          continue;
+        off = setFileOffset(sec, off);
+
+        // If this is a last section of the last executable segment and that
+        // segment is the last loadable segment, align the offset of the
+        // following section to avoid loading non-segments parts of the file.
+        if (config->zSeparate != SeparateSegmentKind::None && lastRX &&
+            lastRX->lastSec == sec)
+          off = alignTo(off, config->commonPageSize);
+      }
+    }
+  }
+
+  // then process non load sections
   for (OutputSection *sec : outputSections) {
+    if (sec->ptLoad)
+      continue;
     off = setFileOffset(sec, off);
-
-    // If this is a last section of the last executable segment and that
-    // segment is the last loadable segment, align the offset of the
-    // following section to avoid loading non-segments parts of the file.
-    if (config->zSeparate != SeparateSegmentKind::None && lastRX &&
-        lastRX->lastSec == sec)
-      off = alignTo(off, config->commonPageSize);
   }
 
   sectionHeaderOff = alignTo(off, config->wordsize);
diff --git a/lld/test/ELF/linkerscript/at8.test b/lld/test/ELF/linkerscript/at8.test
index c611c2e24404..ec003b640af9 100644
--- a/lld/test/ELF/linkerscript/at8.test
+++ b/lld/test/ELF/linkerscript/at8.test
@@ -20,7 +20,7 @@ SECTIONS {
 # PT_LOAD header.
 
 # CHECK: Name              Type            Address          Off
-# CHECK: .text             PROGBITS        0000000008000000 000158
+# CHECK: .text             PROGBITS        0000000008000000 001018
 # CHECK: .sec1             PROGBITS        0000000020000000 001000
 # CHECK: .sec2             PROGBITS        0000000020000008 001008
 # CHECK: .sec3             PROGBITS        0000000020000010 001010
diff --git a/lld/test/ELF/linkerscript/empty-sections-expressions.test b/lld/test/ELF/linkerscript/empty-sections-expressions.test
index ed6c45de6656..0019efde0ed8 100644
--- a/lld/test/ELF/linkerscript/empty-sections-expressions.test
+++ b/lld/test/ELF/linkerscript/empty-sections-expressions.test
@@ -9,7 +9,7 @@
 
 # CHECK:      Name   Type     Address          Off    Size
 # CHECK-NEXT:        NULL     0000000000000000 000000 000000
-# CHECK-NEXT: .empty PROGBITS 0000000000080000 000158 000000
+# CHECK-NEXT: .empty PROGBITS 0000000000080000 001002 000000
 # CHECK-NEXT: .text  PROGBITS 0000000000080000 001000 000001
 # CHECK-NEXT: .data  PROGBITS 0000000000080001 001001 000001
 
diff --git a/lld/test/ELF/linkerscript/implicit-program-header.test b/lld/test/ELF/linkerscript/implicit-program-header.test
index 8a3a4c6684af..83c0781fc5a3 100644
--- a/lld/test/ELF/linkerscript/implicit-program-header.test
+++ b/lld/test/ELF/linkerscript/implicit-program-header.test
@@ -7,7 +7,7 @@
 # RUN: llvm-readelf -l %t1 | FileCheck %s
 
 # CHECK:      Segment Sections...
-# CHECK-NEXT:   00     .dynsym .hash .dynstr .bar .foo .text .dynamic
+# CHECK-NEXT:   00     .dynsym .hash .dynstr .text .dynamic
 # CHECK-NEXT:   01     .bar .foo
 
 PHDRS {
diff --git a/lld/test/ELF/linkerscript/nobits-offset.s b/lld/test/ELF/linkerscript/nobits-offset.s
index 35397ec330ea..e5e457df2be6 100644
--- a/lld/test/ELF/linkerscript/nobits-offset.s
+++ b/lld/test/ELF/linkerscript/nobits-offset.s
@@ -14,8 +14,8 @@
 
 # CHECK:      Name  Type     Address          Off     Size
 # CHECK-NEXT:       NULL     0000000000000000 000000  000000
-# CHECK-NEXT: .text PROGBITS 0000000000000000 000158  000000
-# CHECK-NEXT: .sec1 NOBITS   0000000000000000 000158  000001
+# CHECK-NEXT: .text PROGBITS 0000000000000000 000400  000000
+# CHECK-NEXT: .sec1 NOBITS   0000000000000000 000400  000001
 # CHECK-NEXT: .bss  NOBITS   0000000000000400 000400  000001
 
 # CHECK:      Type Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
diff --git a/lld/test/ELF/linkerscript/out-of-order-sections.s b/lld/test/ELF/linkerscript/out-of-order-sections.s
new file mode 100644
index 000000000000..de1d4f598432
--- /dev/null
+++ b/lld/test/ELF/linkerscript/out-of-order-sections.s
@@ -0,0 +1,49 @@
+# REQUIRES: x86
+# RUN: llvm-mc -filetype=obj -triple=x86_64-unknown-linux %s -o %t
+# RUN: echo "PHDRS { \
+# RUN:           ph1 PT_LOAD; \
+# RUN:           ph2 PT_LOAD; } \
+# RUN:       SECTIONS { \
+# RUN:           .text 0 : {*(.text*)} :ph1 \
+# RUN:           .foo 0x4000 : {*(.foo*)} :ph2 \
+# RUN:           .bar 0x1000 : {*(.bar*)} :ph1 }" > %t.script
+# RUN: ld.lld -o %t1 --script %t.script %t
+# RUN: llvm-readobj -l %t1 | FileCheck %s
+
+# CHECK:     ProgramHeaders [
+# CHECK-NEXT:  ProgramHeader {
+# CHECK-NEXT:    Type: PT_LOAD (0x1)
+# CHECK-NEXT:    Offset: 0x1000
+# CHECK-NEXT:    VirtualAddress: 0x0
+# CHECK-NEXT:    PhysicalAddress: 0x0
+# CHECK-NEXT:    FileSize: 4097
+# CHECK-NEXT:    MemSize: 4097
+# CHECK-NEXT:    Flags [ (0x5)
+# CHECK-NEXT:      PF_R (0x4)
+# CHECK-NEXT:      PF_X (0x1)
+# CHECK-NEXT:    ]
+# CHECK-NEXT:    Alignment: 4096
+# CHECK-NEXT:  }
+# CHECK-NEXT:  ProgramHeader {
+# CHECK-NEXT:    Type: PT_LOAD (0x1)
+# CHECK-NEXT:    Offset: 0x3000
+# CHECK-NEXT:    VirtualAddress: 0x4000
+# CHECK-NEXT:    PhysicalAddress: 0x4000
+# CHECK-NEXT:    FileSize: 1
+# CHECK-NEXT:    MemSize: 1
+# CHECK-NEXT:    Flags [ (0x4)
+# CHECK-NEXT:      PF_R (0x4)
+# CHECK-NEXT:    ]
+# CHECK-NEXT:    Alignment: 4096
+# CHECK-NEXT:  }
+# CHECK-NEXT: ]
+
+.global _start
+_start:
+ nop
+
+.section .foo, "a"
+ .byte 0
+
+.section .bar, "a"
+ .byte 0
diff --git a/lld/test/ELF/linkerscript/tbss.s b/lld/test/ELF/linkerscript/tbss.s
index 1560ad5d039a..881c10124243 100644
--- a/lld/test/ELF/linkerscript/tbss.s
+++ b/lld/test/ELF/linkerscript/tbss.s
@@ -11,7 +11,23 @@
 
 # test that a tbss section doesn't use address space.
 
-# CHECK:        Name: foo
+# CHECK:        Name: .text
+# CHECK-NEXT:   Type: SHT_PROGBITS
+# CHECK-NEXT:   Flags [
+# CHECK-NEXT:     SHF_ALLOC
+# CHECK-NEXT:     SHF_EXECINSTR
+# CHECK-NEXT:   ]
+# CHECK-NEXT:   Address:
+# CHECK-NEXT:   Offset: 0x[[OFFS:.*]]
+# CHECK-NEXT:   Size: 0
+# CHECK-NEXT:   Link:
+# CHECK-NEXT:   Info:
+# CHECK-NEXT:   AddressAlignment:
+# CHECK-NEXT:   EntrySize:
+# CHECK-NEXT: }
+# CHECK-NEXT: Section {
+# CHECK-NEXT:   Index:
+# CHECK-NEXT:   Name: foo
 # CHECK-NEXT:   Type: SHT_NOBITS
 # CHECK-NEXT:   Flags [
 # CHECK-NEXT:     SHF_ALLOC
@@ -19,7 +35,7 @@
 # CHECK-NEXT:     SHF_WRITE
 # CHECK-NEXT:   ]
 # CHECK-NEXT:   Address: 0x[[ADDR:.*]]
-# CHECK-NEXT:   Offset: 0x[[ADDR]]
+# CHECK-NEXT:   Offset: 0x[[OFFS]]
 # CHECK-NEXT:   Size: 4
 # CHECK-NEXT:   Link: 0
 # CHECK-NEXT:   Info: 0
diff --git a/lld/test/ELF/partition-notes.s b/lld/test/ELF/partition-notes.s
index 4db8c3ce9a3d..d312342f6117 100644
--- a/lld/test/ELF/partition-notes.s
+++ b/lld/test/ELF/partition-notes.s
@@ -37,7 +37,7 @@
 // CHECK-NEXT:       Owner: GNU
 // CHECK-NEXT:       Data size:
 // CHECK-NEXT:       Type: NT_GNU_BUILD_ID (unique build ID bitstring)
-// CHECK-NEXT:       Build ID: 08b93eab87177a2356d1b0d1148339463f98dac2
+// CHECK-NEXT:       Build ID: 406d8bb708edff0eccaa111b8d74fabe63d40534
 // CHECK-NEXT:     }
 // CHECK-NEXT:   }
 // CHECK-NEXT: ]
diff --git a/lld/test/ELF/partition-synthetic-sections.s b/lld/test/ELF/partition-synthetic-sections.s
index 9fa5ef97efc4..76861df6e276 100644
--- a/lld/test/ELF/partition-synthetic-sections.s
+++ b/lld/test/ELF/partition-synthetic-sections.s
@@ -190,9 +190,9 @@
 // FILL-NEXT: *
 // FILL-NEXT: 002000
 
-// FILL: 004010 cccc cccc cccc cccc cccc cccc cccc cccc
+// FILL: 005010 cccc cccc cccc cccc cccc cccc cccc cccc
 // FILL-NEXT: *
-// FILL-NEXT: 005000
+// FILL-NEXT: 006000
 
 .section .llvm_sympart,"",@llvm_sympart
 .asciz "part1"
diff --git a/lld/test/ELF/tls-offset.s b/lld/test/ELF/tls-offset.s
index d52e2be657b2..d624cc2d3bd4 100644
--- a/lld/test/ELF/tls-offset.s
+++ b/lld/test/ELF/tls-offset.s
@@ -53,9 +53,9 @@ _start:
 // CHECK-NEXT:    SHF_WRITE
 // CHECK-NEXT:  ]
 // CHECK1-NEXT: Address: 0x2021E0
-// CHECK1-NEXT: Offset: 0x1D4
+// CHECK1-NEXT: Offset: 0x1D8
 // CHECK2-NEXT: Address: 0x202010
-// CHECK2-NEXT: Offset: 0x2004
+// CHECK2-NEXT: Offset: 0x2008
 // CHECK-NEXT:  Size: 16
 
 // CHECK:       Name: .data.rel.ro
-- 
2.30.0

